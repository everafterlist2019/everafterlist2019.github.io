{"version":3,"sources":["ng://@ng-stack/contenteditable/lib/contenteditable.directive.ts","ng://@ng-stack/contenteditable/lib/contenteditable.module.ts"],"names":["ContenteditableDirective","elementRef","renderer","this","propValueAccessor","contenteditable","prototype","callOnChange","onChange","nativeElement","callOnTouched","onTouched","writeValue","value","normalizedValue","setProperty","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","setAttribute","removeDisabledState","listen","listenerDisabledState","removeAttribute","e","preventDefault","Directive","args","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","Renderer2","Input","HostBinding","type","HostListener","ContenteditableModule","NgModule","declarations","exports"],"mappings":"yXAAA,IAAAA,EAAA,WAiBE,SAAAA,EAAoBC,EAAgCC,GAAhCC,KAAAF,WAAAA,EAAgCE,KAAAD,SAAAA,EAP3CC,KAAAC,kBAAoB,cACiBD,KAAAE,iBAAkB,EA4ElE,OAnEEL,EAAAM,UAAAC,aADA,WAE8B,mBAAjBJ,KAAKK,UACdL,KAAKK,SAASL,KAAKF,WAAWQ,cAAcN,KAAKC,qBAKrDJ,EAAAM,UAAAI,cADA,WAE+B,mBAAlBP,KAAKQ,WACdR,KAAKQ,aAWTX,EAAAM,UAAAM,WAAA,SAAWC,OACHC,EAA2B,MAATD,EAAgB,GAAKA,EAC7CV,KAAKD,SAASa,YAAYZ,KAAKF,WAAWQ,cAAeN,KAAKC,kBAAmBU,IAUnFd,EAAAM,UAAAU,iBAAA,SAAiBC,GACfd,KAAKK,SAAWS,GAOlBjB,EAAAM,UAAAY,kBAAA,SAAkBD,GAChBd,KAAKQ,UAAYM,GAOnBjB,EAAAM,UAAAa,iBAAA,SAAiBC,GACXA,GACFjB,KAAKD,SAASmB,aAAalB,KAAKF,WAAWQ,cAAe,WAAY,QACtEN,KAAKmB,oBAAsBnB,KAAKD,SAASqB,OACvCpB,KAAKF,WAAWQ,cAChB,UACAN,KAAKqB,wBAGHrB,KAAKmB,sBACPnB,KAAKD,SAASuB,gBAAgBtB,KAAKF,WAAWQ,cAAe,YAC7DN,KAAKmB,wBAKHtB,EAAAM,UAAAkB,sBAAR,SAA8BE,GAC5BA,EAAEC,sCAjFLC,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,oBACVC,UAAW,CAAC,CAAEC,QAASC,EAAAA,kBAAmBC,YAAaC,EAAAA,WAAU,WAAO,OAAAnC,IAA2BoC,OAAO,iDAPxFC,EAAAA,kBAAYC,EAAAA,wDAU7BC,EAAAA,+BACAC,EAAAA,YAAWX,KAAA,CAAC,yBAAsB,CAAAY,KAAGF,EAAAA,4BAQrCG,EAAAA,aAAYb,KAAA,CAAC,gCAOba,EAAAA,aAAYb,KAAA,CAAC,WA6DhB7B,EAvFA,GCAA2C,EAAA,WAGA,SAAAA,KAIoC,2BAJnCC,EAAAA,SAAQf,KAAA,CAAC,CACRgB,aAAc,CAAC7C,GACf8C,QAAS,CAAC9C,OAEwB2C,EAPpC","sourcesContent":["import { Directive, ElementRef, Renderer2, HostListener, HostBinding, forwardRef, Input } from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[contenteditable]',\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ContenteditableDirective), multi: true }],\n})\nexport class ContenteditableDirective implements ControlValueAccessor {\n  @Input() propValueAccessor = 'textContent';\n  @HostBinding('attr.contenteditable') @Input() contenteditable = true;\n\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n  private removeDisabledState: () => void;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n  @HostListener('input')\n  callOnChange() {\n    if (typeof this.onChange == 'function') {\n      this.onChange(this.elementRef.nativeElement[this.propValueAccessor]);\n    }\n  }\n\n  @HostListener('blur')\n  callOnTouched() {\n    if (typeof this.onTouched == 'function') {\n      this.onTouched();\n    }\n  }\n\n  /**\n   * Writes a new value to the element.\n   * This method will be called by the forms API to write\n   * to the view when programmatic (model -> view) changes are requested.\n   *\n   * See: [ControlValueAccessor](https://angular.io/api/forms/ControlValueAccessor#members)\n   */\n  writeValue(value: any): void {\n    const normalizedValue = value == null ? '' : value;\n    this.renderer.setProperty(this.elementRef.nativeElement, this.propValueAccessor, normalizedValue);\n  }\n\n  /**\n   * Registers a callback function that should be called when\n   * the control's value changes in the UI.\n   *\n   * This is called by the forms API on initialization so it can update\n   * the form model when values propagate from the view (view -> model).\n   */\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Registers a callback function that should be called when the control receives a blur event.\n   * This is called by the forms API on initialization so it can update the form model on blur.\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * This function is called by the forms API when the control status changes to or from \"DISABLED\".\n   * Depending on the value, it should enable or disable the appropriate DOM element.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'true');\n      this.removeDisabledState = this.renderer.listen(\n        this.elementRef.nativeElement,\n        'keydown',\n        this.listenerDisabledState\n      );\n    } else {\n      if (this.removeDisabledState) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n        this.removeDisabledState();\n      }\n    }\n  }\n\n  private listenerDisabledState(e: KeyboardEvent) {\n    e.preventDefault();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ContenteditableDirective } from './contenteditable.directive';\n\n@NgModule({\n  declarations: [ContenteditableDirective],\n  exports: [ContenteditableDirective],\n})\nexport class ContenteditableModule {}\n"]}